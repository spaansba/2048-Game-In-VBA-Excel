
Option Private Module 'Make it so the functions dont show up on the worksheet formulas
' Performance counter API's
#If VBA7 And Win64 Then
    'for 64-bit Excel
    Declare PtrSafe Function QueryPerformanceCounter Lib "kernel32" (lpPerformanceCount As Currency) As Long
    Declare PtrSafe Function QueryPerformanceFrequency Lib "kernel32" (lpFrequency As Currency) As Long
#Else
    'for 32-bit Excel
    Declare Function QueryPerformanceCounter Lib "kernel32" (lpPerformanceCount As Currency) As Long
    Declare Function QueryPerformanceFrequency Lib "kernel32" (lpFrequency As Currency) As Long
#End If

Public curStartCounter As Currency
Public curEndCounter As Currency
Public Elapsed_Time As String
Public Basic_Question_Caller As String
Public Enum Maestro_Settings
    Sheet_Color = 11854022 'if we create a sheet color it like this
End Enum

'Check if sheet exists, if it does open it if not create it (or optionally copy a sheet from add-in), also set the worksheet in the process
Public Function Open_or_Create_Sheet(sheetName As String, Optional Copy_Sheet As String = "") As Worksheet
If Not WorksheetExists(sheetName) Then
    If Copy_Sheet <> "" Then 'Copy Existing sheet in add-in
        ThisWorkbook.Sheets(Copy_Sheet).Copy before:=ActiveWorkbook.Sheets(1)
    Else 'Create new sheet
        ActiveWorkbook.Sheets.Add before:=ActiveWorkbook.Sheets(1)
    End If
    ActiveSheet.Name = sheetName
    ActiveSheet.Tab.Color = Maestro_Settings.Sheet_Color
End If
ActiveWorkbook.Sheets(sheetName).Activate
Set Open_or_Create_Sheet = ActiveWorkbook.Sheets(sheetName) 'Set sheet
End Function

Function WorksheetExists(sheetName As String) As Boolean
    On Error Resume Next
    WorksheetExists = Not Sheets(sheetName) Is Nothing
    On Error GoTo 0
End Function

Public Sub Set_Font(Font_Range As Range, Optional Value_Range As String, Optional Font_Size As Integer, Optional Font_Bold As Boolean, _
Optional Font_Font As String, Optional Horizontal As Long, Optional Vertical As Long, Optional Font_Color As Long, Optional Font_Border As String, _
Optional Interior_Color As Long, Optional vertical_range As Range, Optional Column_Width As Integer, Optional Row_Height As Integer, Optional wrap_text As Boolean = False)
With Font_Range
    .Value = Value_Range
    .Font.Bold = Font_Bold
    .Font.Name = Font_Font
    If Font_Size <> 0 Then .Font.Size = Font_Size
    If Font_Color <> 0 Then .Font.Color = Font_Color
    If Interior_Color <> 0 Then .Interior.Color = Interior_Color
    If Font_Border <> "" Then .Borders.LineStyle = Font_Border
    If Horizontal <> 0 And Horizontal <> 7 Then .HorizontalAlignment = Horizontal  'https://learn.microsoft.com/en-us/office/vba/api/excel.xlhalign
    If Vertical <> 0 Then .VerticalAlignment = Vertical 'https://learn.microsoft.com/en-us/office/vba/api/excel.xlvalign
    If Column_Width <> 0 Then .ColumnWidth = Column_Width
    If Row_Height <> 0 Then .RowHeight = Row_Height
    If wrap_text Then .WrapText = wrap_text
End With

'If horizontal is xlHAlignCenterAcrossSelection, then use Horizontal_Range for the center across selection
If Horizontal = 7 And Not vertical_range Is Nothing Then
    vertical_range.HorizontalAlignment = xlCenterAcrossSelection
End If

End Sub
'Sub that renames a sheet, if the sheet name already exist replace the sheet with the new one
Public Sub Rename_Sheet(rename_ws As Worksheet, WB As Workbook, new_name As String)
Dim ws As Worksheet
For Each ws In ActiveWorkbook.Worksheets
    If ws.Name = new_name Then
        Application.DisplayAlerts = False
        ws.Delete
        Application.DisplayAlerts = True
        Exit For
    End If
Next ws
rename_ws.Name = new_name
rename_ws.Tab.Color = Maestro_Settings.Sheet_Color
End Sub
'Hides all Columns from X column
Public Sub Hide_Columns_From(From_Column As Integer)
Range(Cells(1, From_Column), Cells(1, Columns.Count)).EntireColumn.Hidden = True
End Sub
Public Sub Hide_Rows_From(From_Row As Integer)
    Rows(From_Row & ":" & Rows.Count).EntireRow.Hidden = True
End Sub

Private Sub Change_Samples_Returned_Label()
Dim total_rows As Integer, max_sample As Integer, min_sample As Integer, perc_sample As Integer, sample_size As Integer
Dim sample_based_on_perc As Integer
total_rows = 500
max_sample = 100
min_sample = 10
perc_sample = 0

sample_based_on_perc = total_rows / 100 * perc_sample

Select Case True
    Case sample_based_on_perc > min_sample And sample_based_on_perc < max_sample
        sample_size = sample_based_on_perc
    Case sample_based_on_perc < min_sample
        sample_size = min_sample
    Case sample_based_on_perc > max_sample
        sample_size = max_sample
End Select

Debug.Print sample_size
End Sub
'Purpose: Measure elapsed time in milliseconds
Public Sub StartTimer()
On Error Resume Next
    Dim lgResult As Long
    lgResult = QueryPerformanceCounter(curStartCounter)
End Sub

'Purpose: Measure elapsed time in milliseconds
Public Function Elapsed_Seconds() As String
On Error GoTo Error_Second
Dim lgResult As Long, curFrequency As Currency
lgResult = QueryPerformanceCounter(curEndCounter)
lgResult = QueryPerformanceFrequency(curFrequency)
Elapsed_Seconds = (curEndCounter - curStartCounter) / curFrequency

Exit Function

Error_Second:
Elapsed_Seconds = "Error in Elapsed_Seconds function"
End Function
Public Sub applicationOff()
With Application
.EnableEvents = False
.EnableAnimations = False
.ScreenUpdating = False
.Calculation = xlCalculationManual
.EnableCancelKey = xlErrorHandler
End With
End Sub
Public Sub applicationOn()
With Application
.EnableEvents = True
.EnableAnimations = True
.ScreenUpdating = True
.DisplayAlerts = True
.Calculation = xlCalculationAutomatic
End With
End Sub